# start committing into a git repo
git status (what's the current situation?)
git init (start using git in this directory and all subdirectories)
git add (stage a file - line it up to be committed next, but don't commit it)
git commit -m "message" (commit a file, with this commit message)
git log (list all the previous commits and messages)
git diff <file> (see what has changed in an unstaged file)
git diff --staged <file>  (see what has changed between a staged file and the last commit)
git reset (unstage all staged files)
git reset --hard (undo all changes to files - dangerous!!!)

# alternative commit commands
git commit -am "message" (stage and commit all files that are being tracked, with this commit message)
git commit --amend (commit any staged files and squash this commit with the last commit, using that commit's message)
git commit --amend -m "new message" (commit any staged files and squash this commit with the last commit, using this new commit message)

# go back in time
git checkout <sha> (change the tracked files back to how they were at this previous commit)
git checkout master (change the tracked files back to how they are at the most recent commit on the master branch)
git checkout HEAD~1 (change the tracked files back to how they were one commit ago)

# creating a GitHub repository
log in to GitHub
click on the '+' in the upper-right corner and select 'New repository'
enter a name and description
decide whether to make it public or private
IF you already have a local git repo to send up
  do *not* select the options to add a README, .gitignore, and license
  select create repository
  click on the green 'Clone or download' button and copy the https url
  use this to add as a remote using the instructions below
ELSE
  you can select some of those options to initialize the repository
  click on the green 'Clone or download' button and copy the https url to use as <remote_url> below
  do: 'git clone <remote_url>' in a directory, and the git repo will be created in a directory with the name of the repo, and the remote already registered as 'origin

# add a remote repository (like a github repo) to your existing git repo
git remote -v (list all remotes branches and their URLs)
git remote add <remote_name> <remote_url> (create a new remote, giving it a name and pointing to a URL)
git fetch <remote_name> (get information about branches and commits currently on the remote)
git merge <remote_name/remote_branch> (merge the commits on a branch of the remote into your current branch)
git merge --ff-only <remote_name/remote_branch> (merge commits from a remote branch into your current branch *only* if they can be applied after the most recent commit on you current branch without a merge; a fast-forward merge)
git pull <remote_name> <remote_branch> (do 'git fetch <remote_name>' and 'git merge <remote_name/remote_branch>' in one go)
* git gr (print a nice illustration of all branches, remotes, and commits - not a standard git command, see useful_tools.R)
git push <remote_name> <local_branch> (copy the local branch up to the remote, but only if it can do a fast-forward merge)



The ELSE instructions above also work (minus the first line) to clone someone else's GitHub repository



# resolving a merge conflict
git merge <branch> (merge the branch into your current branch)
if there is a merge conflict, manually edit the files, searching files for '===' to see what needs changing, then delete the conflict markup
git add <conflicted_files> (stage the files you edited to be merged)
git merge --continue (finish the merge, using your resolution to the conflict)

# create a branch (alternate reality)
git checkout -b <local_branch> (create a new branch, splitting off from the current commit, and make that the HEAD)
git branch -v (list all current branches and their most recent commits)
git checkout <local_branch> (switch HEAD to the most recent commit on the named branch)
git branch -d <local_branch> (delete this branch - you can't delete the branch you are currently on!)
git merge <local_branch> (try to merge the branches)
